---
title: "Bank"
format: html
editor: visual
---

```{r warning=FALSE, echo=FALSE, message=FALSE}
library(tidyverse)
library(readr)
library(stargazer)
library(ggcorrplot)
library(rstatix)
library(rpart)
library(ROSE)
library(tidymodels)
library(randomForest)
library(doParallel)
library(rio)
library(themis)
```

```{r message=FALSE}
Dataframe_base <- read_csv2("bank-full.csv")
head(Dataframe_base)

Dataframe <- Dataframe_base
# rozmiar ramki danych
dim(Dataframe)

# streszczenie danych numerycznych
Dataframe_numeric <- Dataframe[sapply(Dataframe, class) != "character"]
summary(Dataframe_numeric)


```

```{r}
# Sprawdzenie czy występują braki danych 
colSums(is.na(Dataframe))



table(Dataframe$contact)

# zamiana "unknown" na NA w komumnie contact
Dataframe$contact <- replace(Dataframe$contact, Dataframe$contact=="unknown", NA)

sum(is.na(Dataframe$contact))

Dataframe <- na.omit(Dataframe)
```

```{r}
# dystrbucja wieku
Dataframe %>% 
  ggplot(aes(x = age))+geom_histogram(bins = 78)
  
```

```{r}
# macierz korelacji
corr <- cor_mat(Dataframe_numeric)
p_mat <- cor_pmat(Dataframe_numeric)
ggcorrplot(corr, p.mat = p_mat,lab = T)
```

```{r message=FALSE}

table(Dataframe$poutcome)
Dataframe$poutcome <- str_replace_all(Dataframe$poutcome,"unknown","no")

# zamiana zmiennych typu character na numeric

Dataframe$marital <- match(Dataframe$marital, c("single", "married", "divorced"))
Dataframe$housing <- ifelse(Dataframe$housing == "yes", 1, 0)
Dataframe$loan <- ifelse(Dataframe$loan == "yes", 1, 0)
Dataframe$default <- ifelse(Dataframe$default == "yes", 1, 0)
Dataframe$job <- match(Dataframe$job, unique(Dataframe$job))
Dataframe$education <- match(Dataframe$education, unique(Dataframe$education))
Dataframe$month <- match(Dataframe$month, tolower(month.abb))
Dataframe$contact <- match(Dataframe$contact, unique(Dataframe$contact))
Dataframe$poutcome <- match(Dataframe$poutcome, unique(Dataframe$poutcome))
Dataframe$y <- ifelse(Dataframe$y == "yes", 1, 0)
Dataframe$y <- as.factor(Dataframe$y)


```

```{r}
# zliczenie obserwacji
plyr::count(Dataframe, "y")

plyr::count(Dataframe, "contact")

ggplot(Dataframe, aes(x=y))+
  geom_bar(fill = "lightgreen")+
  xlab("no / yes")

```

podział danych

```{r}
set.seed(2000)

#podział danych na zbiór testowy i treingowy
data_split <- initial_split(Dataframe, 0.85)
train <- training(data_split)
test <- testing(data_split)


```



random forest

```{r}
#przepis
rec <- recipe(y ~ ., data = train) |> 
  step_smote(y)

folds <- vfold_cv(train, v = 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow = TRUE)

#model
RF <- rand_forest(mode = "classification",
                  engine = "ranger",
                  min_n = tune(),
                  trees = tune() )

rf_params <- extract_parameter_set_dials(RF)


rf_grid <- rf_params %>% 
  grid_latin_hypercube(size = 3)

wf_rf <- workflow() %>% 
  add_model(RF) %>% 
  add_recipe(rec)


registerDoParallel(cores=6)


wf_train <- wf_rf %>% 
  tune_grid(resamples = folds,
            grid = rf_grid,
            control = keep_pred)

#saveRDS(wf_train,"wf_rf_train2.rds")

#wf_train <- readRDS("wf_rf_train2.rds")

wf_train %>% 
  collect_metrics(summarize = T)

autoplot(wf_train)

best <- wf_train %>% 
  select_best(metric = "roc_auc")

wf_best <- finalize_workflow(wf_rf, best)


wf_best_fit <- wf_best %>% 
  fit(train)

#saveRDS(wf_best_fit,"wf_rf_best_fit2.rds")

#wf_best_fit <- readRDS("wf_rf_best_fit2.rds")


rf_pred <- predict(wf_best_fit, test) #ramka danych z predykcją

#ramka danych łączoa predykcje z rzeczywistymi danymi
rf_df <- bind_cols(rf_pred, "target" = test$y)

#confusion matrix
conf_reg <- conf_mat(rf_df, truth = "target", estimate = ".pred_class")

conf_reg %>%
  autoplot(type = "heatmap")

roc.curve(rf_df$target, rf_df$.pred_class)
```

